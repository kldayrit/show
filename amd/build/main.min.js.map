{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["define(['jquery'], function($) {\n    // Cosine similarity with tf-idf for crude semantic analysis\n    const stopWords = [\"the\", \"is\", \"in\", \"a\", \"an\", \"at\", \"from\"];\n    // Helper function to tokenize the text and remove punctuation and stop words\n  /**\n   * @param {string}text\n   * @return {array}\n   */\n  function tokenize(text) {\n    return text.toLowerCase().match(/\\b\\w+\\b/g).filter(word => !stopWords.includes(word));\n  }\n\n  // Helper function to calculate the term frequency (TF) of each word in a document\n  /**\n   * @param {array}document\n   * @return {array}\n   */\n  function calculateTF(document) {\n    const wordFrequency = {};\n    const words = tokenize(document);\n\n    for (const word of words) {\n      wordFrequency[word] = (wordFrequency[word] || 0) + 1;\n    }\n\n    const totalWords = words.length;\n    const tf = {};\n    for (const word in wordFrequency) {\n      tf[word] = wordFrequency[word] / totalWords;\n    }\n\n    return tf;\n  }\n\n  // Helper function to calculate the inverse document frequency (IDF) for each word\n  /**\n   * @param {array} textArray\n   * @return {array}\n   */\n  function calculateIDF(textArray) {\n    const documentFrequency = {};\n    const totalDocuments = textArray.length;\n\n    for (const document of textArray) {\n      const words = tokenize(document);\n      for (const word of words) {\n        documentFrequency[word] = (documentFrequency[word] || 0) + 1;\n      }\n    }\n\n    const idf = {};\n    for (const word in documentFrequency) {\n      idf[word] = Math.log(totalDocuments / (documentFrequency[word] + 1)); // Adding 1 to avoid division by zero\n    }\n\n    return idf;\n  }\n\n  // Helper function to calculate the TF-IDF for a document\n  /**\n   * @param {array} tf\n   * @param {array} idf\n   * @return {array}\n   */\n  function calculateTFIDF(tf, idf) {\n    const tfidf = {};\n    for (const word in tf) {\n      tfidf[word] = tf[word] * idf[word];\n    }\n    return tfidf;\n  }\n\n  // Helper function to calculate the dot product of two vectors\n  /**\n   * @param {int} vectorA\n   * @param {int} vectorB\n   * @return {int}\n   */\n  function dotProduct(vectorA, vectorB) {\n    let product = 0;\n    for (const word in vectorA) {\n      if (vectorB.hasOwnProperty(word)) {\n        product += vectorA[word] * vectorB[word];\n      }\n    }\n    return product;\n  }\n\n  // Helper function to calculate the magnitude of a vector\n  /**\n   * @param {int} vector\n   * @return {int}\n   */\n  function vectorMagnitude(vector) {\n    let sumOfSquares = 0;\n    for (const word in vector) {\n      sumOfSquares += vector[word] ** 2;\n    }\n    return Math.sqrt(sumOfSquares);\n  }\n\n  // Helper function to calculate the cosine similarity between two documents\n  /**\n   * @param {string} documentA\n   * @param {string} documentB\n   * @param {array} idf\n   * @return {int}\n   */\n  function cosineSimilarity(documentA, documentB, idf) {\n    const tfA = calculateTF(documentA);\n    const tfB = calculateTF(documentB);\n\n    const tfidfA = calculateTFIDF(tfA, idf);\n    const tfidfB = calculateTFIDF(tfB, idf);\n\n    const dotProductAB = dotProduct(tfidfA, tfidfB);\n    const magnitudeA = vectorMagnitude(tfidfA);\n    const magnitudeB = vectorMagnitude(tfidfB);\n\n    return dotProductAB / (magnitudeA * magnitudeB);\n  }\n    // FROM https://www.npmjs.com/package/string-similarity?activeTab=code\n    /**\n     * @param {string} first string\n     * @param {string} second\n     * @returns {int}\n     */\n    function compareTwoStrings(first, second) {\n        first = first.replace(/\\s+/g, '');\n        second = second.replace(/\\s+/g, '');\n\n        if (first === second) {\n            return 1;\n        } // Identical or empty\n        if (first.length < 2 || second.length < 2) {\n            return 0;\n        } // If either is a 0-letter or 1-letter string\n\n        let firstBigrams = new Map();\n        for (let i = 0; i < first.length - 1; i++) {\n            const bigram = first.substring(i, i + 2);\n            const count = firstBigrams.has(bigram)\n                ? firstBigrams.get(bigram) + 1\n                : 1;\n\n            firstBigrams.set(bigram, count);\n        }\n\n        let intersectionSize = 0;\n        for (let i = 0; i < second.length - 1; i++) {\n            const bigram = second.substring(i, i + 2);\n            const count = firstBigrams.has(bigram)\n                ? firstBigrams.get(bigram)\n                : 0;\n\n            if (count > 0) {\n                firstBigrams.set(bigram, count - 1);\n                intersectionSize++;\n            }\n        }\n\n        return (2.0 * intersectionSize) / (first.length + second.length - 2);\n    }\n\n    /**\n     * @param {string} mainString\n     * @param {string} targetStrings\n     * @return {array}\n     */\n    function findBestMatch(mainString, targetStrings) {\n        if (!areArgsValid(mainString, targetStrings)) {\n throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n}\n\n        const ratings = [];\n        let bestMatchIndex = 0;\n\n        for (let i = 0; i < targetStrings.length; i++) {\n            const currentTargetString = targetStrings[i];\n            const currentRating = compareTwoStrings(mainString, currentTargetString);\n            ratings.push({target: currentTargetString, rating: currentRating});\n            if (currentRating > ratings[bestMatchIndex].rating) {\n                bestMatchIndex = i;\n            }\n        }\n\n\n        const bestMatch = ratings[bestMatchIndex];\n\n        return {ratings: ratings, bestMatch: bestMatch, bestMatchIndex: bestMatchIndex};\n    }\n\n    /**\n     * @param {string} mainString\n     * @param {string} targetStrings\n     * @returns {boolean}\n     */\n    function areArgsValid(mainString, targetStrings) {\n        if (typeof mainString !== 'string') {\n        return false;\n        }\n                if (!Array.isArray(targetStrings)) {\n        return false;\n        }\n                if (!targetStrings.length) {\n        return false;\n        }\n        if (targetStrings.find(function(s) {\n        return typeof s !== 'string';\n        })) {\n        return false;\n        }\n        return true;\n    }\n\n    return {\n        'initialize': function() {\n            $('.check').bind('click', function() {\n                var value = $(this).attr(\"value\");\n                var textArray = value.split(\"||\");\n                var selected = textArray[0];\n                textArray.shift();\n                var rat = findBestMatch(textArray[selected], textArray.filter(function(x) {\n                            return textArray.indexOf(x) != selected;\n                            }));\n                var compare = rat.ratings;\n                $('tr').css('background-color', '');\n                $('.' + selected).css('background-color', '');\n                $('#' + selected).closest('tr').css('background-color', 'rgb(219, 255, 219)');\n                for (let i = 0; i < textArray.length; i++) {\n                    $('.' + i).html('--');\n                }\n                compare.forEach(function(item) {\n                    if (item.rating > 0.6) {\n                        $('.' + textArray.indexOf(item.target)).css('background-color', 'rgb(255, 189, 182)');\n\n                    } else {\n                        $('.' + textArray.indexOf(item.target)).css('background-color', '');\n                    }\n                    $('.' + textArray.indexOf(item.target)).html(Math.round(item.rating * 100 * 100) / 100 + '% similar');\n                });\n                const idf = calculateIDF(textArray);\n                const documentA = textArray[selected];\n                for (let j = 0; j < textArray.length; j++) {\n                    $('.sem' + j).css('background-color', '');\n                    if (j == selected) {\n                        $('.sem' + j).html('--');\n                        continue;\n                    }\n                    const documentB = textArray[j];\n                    const similarity = cosineSimilarity(documentA, documentB, idf);\n                    if (isNaN(similarity)) {\n                        similarity = 0;\n                    }\n                    if (similarity > 0.6) {\n                        $('.sem' + j).css('background-color', 'rgb(255, 189, 182)');\n                    }\n                    $('.sem' + j).html(Math.round(similarity * 100 * 100) / 100 + '% similar');\n                }\n            });\n        }\n    };\n});"],"names":["define","$","stopWords","tokenize","text","toLowerCase","match","filter","word","includes","calculateTF","document","wordFrequency","words","totalWords","length","tf","calculateTFIDF","idf","tfidf","vectorMagnitude","vector","sumOfSquares","Math","sqrt","cosineSimilarity","documentA","documentB","tfA","tfB","tfidfA","tfidfB","vectorA","vectorB","product","hasOwnProperty","dotProduct","compareTwoStrings","first","second","replace","firstBigrams","Map","i","bigram","substring","count","has","get","set","intersectionSize","findBestMatch","mainString","targetStrings","Array","isArray","find","s","areArgsValid","Error","ratings","bestMatchIndex","currentTargetString","currentRating","push","target","rating","bestMatch","bind","textArray","this","attr","split","selected","shift","compare","x","indexOf","css","closest","html","forEach","item","round","documentFrequency","totalDocuments","log","calculateIDF","j","similarity","isNaN"],"mappings":"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"}